[ FormDesignerId ("459CCBF2-2927-4B0E-9725-58870AC1CBCD") ]
[ ClassId ("A7B6512E-3879-4E06-877A-57DE084B7C0E") ]
[ InterfaceId ("93E803AE-7070-4FD8-BFA5-EAC192FF6CF3") ]
[ EventInterfaceId ("B5F4F4A9-FE24-45D3-996D-03E208194D7B") ]
Class fLevel
    Attribute VB_Name = "fLevel"
    Attribute VB_GlobalNameSpace = False
    Attribute VB_Creatable = False
    Attribute VB_PredeclaredId = True
    Attribute VB_Exposed = False
    Option Explicit
    
    Private Const TV_FIRST         As Long = &H1100
    Private Const TVM_SETBKCOLOR   As Long = TV_FIRST + 29
    Private Const TVM_SETTEXTCOLOR As Long = TV_FIRST + 30
    Private Const TVM_SETIMAGELIST As Long = TV_FIRST + 9
    
    Private Declare PtrSafe Function SendMessage Lib "user32" Alias "SendMessageA" (ByVal hWnd As LongPtr, ByVal wMsg As Long, ByVal wParam As LongPtr, lParam As Any) As LongPtr
    
    Public Enum ImageTypes
        IMAGE_BITMAP = 0
        IMAGE_ICON = 1
        IMAGE_CURSOR = 2
        IMAGE_ENHMETAFILE = 3
    End Enum
    Private Enum LoadResourceFlags
        LR_DEFAULTCOLOR = &H0
        LR_MONOCHROME = &H1
        LR_COLOR = &H2
        LR_COPYRETURNORG = &H4
        LR_COPYDELETEORG = &H8
        LR_LOADFROMFILE = &H10
        LR_LOADTRANSPARENT = &H20
        LR_DEFAULTSIZE = &H40
        LR_VGACOLOR = &H80
        LR_LOADMAP3DCOLORS = &H1000
        LR_CREATEDIBSECTION = &H2000
        LR_COPYFROMRESOURCE = &H4000
        LR_SHARED = &H8000&
    End Enum
    Private Declare PtrSafe Function LoadImageW Lib "user32" (ByVal hInst As LongPtr, ByVal lpsz As LongPtr, ByVal dwImageType As ImageTypes, ByVal dwDesiredWidth As Long, ByVal dwDesiredHeight As Long, ByVal dwFlags As LoadResourceFlags) As LongPtr

Private Type BITMAPINFOHEADER
   biSize                   As Long
   biWidth                  As Long
   biHeight                 As Long
   biPlanes                 As Integer
   biBitCount               As Integer
   biCompression            As Long
   biSizeImage              As Long
   biXPelsPerMeter          As Long
   biYPelsPerMeter          As Long
   biClrUsed                As Long
   biClrImportant           As Long
End Type
Private Type BITMAPINFO
   bmiHeader                As BITMAPINFOHEADER
   bmiColors(3)             As Long
End Type

Private Const InterpolationModeHighQualityBicubic = 7
Private Const UnitPixel = 2
Private Const DIB_RGB_COLORS        As Long = 0&


Private Enum TVITEM_Mask
    TVIF_TEXT = &H1
    TVIF_IMAGE = &H2
    TVIF_PARAM = &H4
    TVIF_STATE = &H8
    TVIF_HANDLE = &H10
    TVIF_SELECTEDIMAGE = &H20
    TVIF_CHILDREN = &H40
    TVIF_INTEGRAL = &H80
    '6.0
    TVIF_STATEEX = &H100
    TVIF_EXPANDEDIMAGE = &H200
    TVIF_DI_SETITEM = &H1000
End Enum
' TVITEM state, stateMask
Private Enum TVITEM_State
    TVIS_SELECTED = &H2
    TVIS_CUT = &H4
    TVIS_DROPHILITED = &H8
    TVIS_BOLD = &H10
    TVIS_EXPANDED = &H20
    TVIS_EXPANDEDONCE = &H40
    TVIS_EXPANDPARTIAL = &H80
    TVIS_OVERLAYMASK = &HF00
    TVIS_STATEIMAGEMASK = &HF000&
    TVIS_USERMASK = &HF000&
End Enum
Private Type TVITEMW
  Mask As TVITEM_Mask
  hItem As LongPtr
  State As TVITEM_State
  StateMask As TVITEM_State
  pszText As LongPtr
  cchTextMax As Long
  iImage As Long
  iSelectedImage As Long
  cChildren As Long
  lParam As LongPtr
End Type
Private Const TVM_GETITEMW = (TV_FIRST + 62)
Private Const TVM_SETITEMW = (TV_FIRST + 63)

Private Enum IL_CreateFlags
  ILC_MASK = &H1
  ILC_COLOR = &H0
  ILC_COLORDDB = &HFE
  ILC_COLOR4 = &H4
  ILC_COLOR8 = &H8
  ILC_COLOR16 = &H10
  ILC_COLOR24 = &H18
  ILC_COLOR32 = &H20
  ILC_PALETTE = &H800                  ' (no longer supported...never worked anyway)
  '5.0
  ILC_MIRROR = &H2000
  ILC_PERITEMMIRROR = &H8000&
  '6.0
  ILC_ORIGINALSIZE = &H10000
  ILC_HIGHQUALITYSCALE = &H20000
End Enum
Private Declare PtrSafe Function ImageList_Add Lib "comctl32.dll" (ByVal himl As LongPtr, ByVal hbmImage As LongPtr, ByVal hBMMask As LongPtr) As Long
Private Declare PtrSafe Function ImageList_AddMasked Lib "comctl32.dll" (ByVal himl As LongPtr, ByVal hbmImage As LongPtr, ByVal crMask As Long) As Long
Private Declare PtrSafe Function ImageList_BeginDrag Lib "comctl32.dll" (ByVal himlTrack As LongPtr, ByVal iTrack As Long, ByVal dxHotspot As Long, ByVal dyHotspot As Long) As Long
Private Declare PtrSafe Function ImageList_Copy Lib "comctl32.dll" (ByVal himlDst As LongPtr, ByVal iDst As Long, ByVal himlSrc As LongPtr, ByVal iSrc As Long, ByVal uFlags As Long) As Long
Private Declare PtrSafe Function ImageList_Create Lib "comctl32.dll" (ByVal cx As Long, ByVal cy As Long, ByVal Flags As IL_CreateFlags, ByVal cInitial As Long, ByVal cGrow As Long) As LongPtr
Private Declare PtrSafe Function ImageList_Destroy Lib "comctl32.dll" (ByVal himl As LongPtr) As Long
Private Declare PtrSafe Function SelectObject Lib "gdi32" (ByVal hDC As LongPtr, ByVal hObject As LongPtr) As LongPtr

Private Declare PtrSafe Function DeleteObject Lib "gdi32" (ByVal hObject As LongPtr) As Long
Private Declare PtrSafe Function DeleteDC Lib "gdi32" (ByVal hDC As LongPtr) As Long
Private Declare PtrSafe Function OleTranslateColor Lib "oleaut32" (ByVal Color As Long, ByVal hpal As LongPtr, ByRef RGBResult As Long) As Long
Private Declare PtrSafe Function CreateCompatibleDC Lib "gdi32" (ByVal hDC As LongPtr) As LongPtr
Private Declare PtrSafe Function CreateDIBSection Lib "gdi32" (ByVal hDC As LongPtr, pBitmapInfo As BITMAPINFO, ByVal usage As Long, ByRef lplpVoid As Any, ByVal hSection As LongPtr, ByVal offset As Long) As LongPtr

Private gdipInitToken As LongPtr
Private Type GdiplusStartupInput
    GdiplusVersion           As Long
    DebugEventCallback       As LongPtr
    SuppressBackgroundThread As Long
    SuppressExternalCodecs   As Long
End Type
Private Declare PtrSafe Function GdiplusStartup Lib "gdiplus" (ByRef token As LongPtr, ByRef lpInput As GdiplusStartupInput, ByRef lpOutput As Long) As Long
Private Declare PtrSafe Function GdiplusShutdown Lib "gdiplus" (ByVal token As LongPtr) As Long
Private Declare PtrSafe Function GdipCreateBitmapFromHBITMAP Lib "GDIPlus" (ByVal hbm As LongPtr, ByVal hPal As LongPtr, ByRef BITMAP As LongPtr) As Long
Private Declare PtrSafe Function GdipCreateFromHDC Lib "gdiplus" (ByVal hdc As LongPtr, ByRef graphics As LongPtr) As Long
Private Declare PtrSafe Function GdipCreateHBITMAPFromBitmap Lib "GDIPlus" (ByVal BITMAP As LongPtr, hbmReturn As LongPtr, ByVal background As LongPtr) As Long
Private Declare PtrSafe Function GdipCreatePen1 Lib "gdiplus.dll" (ByVal mColor As Long, ByVal mWidth As Single, ByRef mUnit As Long, ByRef mPen As LongPtr) As Long
Private Declare PtrSafe Function GdipDeleteGraphics Lib "gdiplus" (ByVal graphics As LongPtr) As Long
Private Declare PtrSafe Function GdipDeletePen Lib "GdiPlus.dll" (ByVal mPen As LongPtr) As Long
Private Declare PtrSafe Function GdipDisposeImage Lib "GDIPlus" (ByVal image As LongPtr) As Long
Private Declare PtrSafe Function GdipDrawImageRectI Lib "gdiplus.dll" (ByVal graphics As LongPtr, ByVal Img As LongPtr, ByVal X As Long, ByVal Y As Long, ByVal Width As Long, ByVal Height As Long) As Long
Private Declare PtrSafe Function GdipDrawImageRectRectI Lib "GDIPlus" (ByVal graphics As LongPtr, ByVal Image As LongPtr, ByVal dstx As Long, ByVal dsty As Long, ByVal dstwidth As Long, ByVal dstheight As Long, ByVal srcx As Long, ByVal srcy As Long, ByVal srcwidth As Long, ByVal srcheight As Long, ByVal srcUnit As Long, ByVal imageAttributes As Long, ByVal callback As Long, ByVal callbackData As LongPtr) As Long
Private Declare PtrSafe Function GdipDrawRectangleI Lib "GdiPlus.dll" (ByVal mGraphics As LongPtr, ByVal mPen As LongPtr, ByVal mX As Long, ByVal mY As Long, ByVal mWidth As Long, ByVal mHeight As Long) As Long
Private Declare PtrSafe Function GdipGetImageHeight Lib "gdiplus.dll" (ByVal Image As LongPtr, Height As Long) As Long
Private Declare PtrSafe Function GdipGetImageWidth Lib "gdiplus.dll" (ByVal Image As LongPtr, Width As Long) As Long
Private Declare PtrSafe Function GdipLoadImageFromFile Lib "gdiplus.dll" (ByVal FileName As LongPtr, GpImage As LongPtr) As Long
Private Declare PtrSafe Function GdipSetInterpolationMode Lib "gdiplus.dll" (ByVal graphics As LongPtr, ByVal InterMode As Long) As Long



Private himl As LongPtr
    
    
    
    '========================================================================================
    ' Main
    '========================================================================================
    
    Private Sub Form_Load()
        gdipInitToken = InitGDIPlus()
        '-- No icon
        Set Me.Icon = Nothing
        
        '-- Form cursor
        Set Me.MouseIcon = VB.LoadResPicture("CUR_HAND", vbResCursor)
        
        '-- Image-list images
        Call Me.ilLevels.ListImages.Add(, , VB.LoadPicture(AppPath & "RES\Folder_blue.gif"))
        Call Me.ilLevels.ListImages.Add(, , VB.LoadPicture(AppPath & "RES\Folder_blue.gif"))
        Call Me.ilLevels.ListImages.Add(, , VB.LoadPicture(AppPath & "RES\Checkbox_unchecked.gif"))
        Call Me.ilLevels.ListImages.Add(, , VB.LoadPicture(AppPath & "RES\Checkbox_checked.gif"))
        
        himl = ImageList_Create(16, 16, ILC_COLOR32 Or ILC_MASK, 4, 0)
        If himl Then
            Dim hBmp As LongPtr
            'hBmp = LoadImageW(0, StrPtr(AppPath & "RES\Folder_blue.gif"), IMAGE_BITMAP, 16, 16, LR_LOADFROMFILE)
            hBmp = hBitmapFromFile(AppPath & "RES\Folder_blue.gif", 16, 16)
            If hBmp Then
                ImageList_AddMasked himl, hBmp, 0
                ImageList_Add himl, hBmp, 0
                DeleteObject hBmp
                hBmp = 0
            End If
            'hBmp = LoadImageW(0, StrPtr(AppPath & "RES\Checkbox_unchecked"), IMAGE_BITMAP, 16, 16, LR_LOADFROMFILE)
            hBmp = hBitmapFromFile(AppPath & "RES\Checkbox_unchecked.gif", 16, 16)
            If hBmp Then
                ImageList_Add himl, hBmp, 0
                DeleteObject hBmp
                hBmp = 0
            End If
            ' hBmp = LoadImageW(0, StrPtr(AppPath & "RES\Checkbox_checked.gif"), IMAGE_BITMAP, 16, 16, LR_LOADFROMFILE)
            hBmp = hBitmapFromFile(AppPath & "RES\Checkbox_checked.gif", 16, 16)
            If hBmp Then
                ImageList_AddMasked himl, hBmp, 0
                DeleteObject hBmp
                hBmp = 0
            End If
        End If
        
        '-- Change treeview colors (masking problems with imagelist)
        Call SendMessage(Me.tvLevels.hWnd, TVM_SETBKCOLOR, 0, ByVal vbWhite)
        Call SendMessage(Me.tvLevels.hWnd, TVM_SETTEXTCOLOR, 0, ByVal vbBlack)
        'Call SendMessage(Me.tvLevels.hWnd, TVM_SETIMAGELIST, 0, ByVal ilLevels.hImageList)
        Call SendMessage(Me.tvLevels.hWnd, TVM_SETIMAGELIST, 0, ByVal himl)
        
        '-- Level preview drawing offsets
        ucThumbnail.xOffset = 1
        ucThumbnail.yOffset = 1
        
        '-- Skill images
        Set imgSkill(0) = VB.LoadPicture(AppPath & "RES\Climber.ico")
        Set imgSkill(1) = VB.LoadPicture(AppPath & "RES\Floater.ico")
        Set imgSkill(2) = VB.LoadPicture(AppPath & "RES\Bomber.ico")
        Set imgSkill(3) = VB.LoadPicture(AppPath & "RES\Blocker.ico")
        Set imgSkill(4) = VB.LoadPicture(AppPath & "RES\Builder.ico")
        Set imgSkill(5) = VB.LoadPicture(AppPath & "RES\Basher.ico")
        Set imgSkill(6) = VB.LoadPicture(AppPath & "RES\Miner.ico")
        Set imgSkill(7) = VB.LoadPicture(AppPath & "RES\Digger.ico")
        
        '-- Fill treeview with all levels
        Screen.MousePointer = vbHourglass
        Call pvShowAllLevels
        Screen.MousePointer = vbDefault
        
        '-- Select current level ID
        Call pvSelectCurrent
    End Sub
    
    
    Private Sub tvLevels_NodeClick(ByVal Node As WinNativeCommonCtls.Node)
        
        If (Node.Children) Then
        
            '-- Single click expands roots
            If (Node.Expanded = False) Then
                Node.Expanded = True
            End If
            
            '-- Root node: no level selected
            Call ucThumbnail.DIB.Destroy
            Call ucThumbnail.Refresh
            lblLemsToLetOutVal = ""
            lblLemsToBeSavedVal = ""
            lblPlayingTimeVal = ""
            lblSkill(0) = ""
            lblSkill(1) = ""
            lblSkill(2) = ""
            lblSkill(3) = ""
            lblSkill(4) = ""
            lblSkill(5) = ""
            lblSkill(6) = ""
            lblSkill(7) = ""
            
          Else
            '-- Extract level key
            g_nLevelID = Val(Mid$(tvLevels.SelectedItem.Key, 2))
            
            '-- Load/create level thumbnail
            Call GetLevelThumbnail(ucThumbnail.DIB)
            Call ucThumbnail.Refresh
            
            '-- Get level info
            Call LoadLevelInfo(g_nLevelID)
            With g_uLevel
                lblLemsToLetOutVal = .LemsToLetOut
                lblLemsToBeSavedVal = .LemsToBeSaved
                lblPlayingTimeVal = .PlayingTime & "'"
                lblSkill(0) = IIf(.MaxClimbers, .MaxClimbers, "-")
                lblSkill(1) = IIf(.MaxFloaters, .MaxFloaters, "-")
                lblSkill(2) = IIf(.MaxBombers, .MaxBombers, "-")
                lblSkill(3) = IIf(.MaxBlockers, .MaxBlockers, "-")
                lblSkill(4) = IIf(.MaxBuilders, .MaxBuilders, "-")
                lblSkill(5) = IIf(.MaxBashers, .MaxBashers, "-")
                lblSkill(6) = IIf(.MaxMiners, .MaxMiners, "-")
                lblSkill(7) = IIf(.MaxDiggers, .MaxDiggers, "-")
            End With
        End If
    End Sub
    
    Private Sub cmdOK_Click()
    
        '-- Is a valid node?
        If (tvLevels.SelectedItem.Children = 0) Then
            '-- Yes
            Call VB.Unload(Me)
          Else
            '-- No
            Call VBA.MsgBox( _
                 "No level has been selected." & vbCrLf & vbCrLf & "Please, select a valid level.", _
                 vbExclamation _
                 )
        End If
    End Sub
    
    Private Sub cmdCancel_Click()
        
        '-- Just exit
        Call VB.Unload(Me)
    End Sub
    
    '========================================================================================
    ' Private
    '========================================================================================
    
    Private Sub pvShowAllLevels()
        
      Dim nRatings   As Integer
      Dim sPath      As String
      Dim r          As Integer
      Dim l          As Integer
      Dim lID        As Integer
      Dim s          As String
      Dim bDone      As Boolean
      Dim pNode      As WinNativeCommonCtls.Node
      Dim tvi        As TVITEMW
      
        '-- Available ratings
        Select Case g_eGamePack
            Case [ePackLems]
                Call tvLevels.Nodes.Add(, , "Fun", "Fun", 1)
                Call tvLevels.Nodes.Add(, , "Tricky", "Tricky", 1)
                Call tvLevels.Nodes.Add(, , "Taxing", "Taxing", 1)
                Call tvLevels.Nodes.Add(, , "Mayhem", "Mayhem", 1)
                nRatings = 4
            Case [ePackOhNoMoreLems]
                Call tvLevels.Nodes.Add(, , "Tame", "Tame", 1)
                Call tvLevels.Nodes.Add(, , "Crazy", "Crazy", 1)
                Call tvLevels.Nodes.Add(, , "Wild", "Wild", 1)
                Call tvLevels.Nodes.Add(, , "Wicked", "Wicked", 1)
                Call tvLevels.Nodes.Add(, , "Havoc", "Havoc", 1)
                nRatings = 5
            Case [ePackCustom]
                Call tvLevels.Nodes.Add(, , "Custom", "Custom", 2)
        End Select
        
        '-- Load levels...
        
        sPath = AppPath & "LEVELS\"
        
        If (g_eGamePack = [ePackCustom]) Then
            
            '-- Search levels...
            For lID = g_eGamePack * 1000 To g_eGamePack * 1000 + 999
                
                '-- Level ID
                s = Format$(lID, "0000")
                
                '-- Exists?
                If (FileExists(sPath & s & ".dat")) Then
                
                    '-- Done?
                    bDone = IsLevelDone(Val(s))
                    
                    
                    '-- Add to list
                    Call LoadLevelTitle(Val(s))
                    Set pNode = tvLevels.Nodes.Add(r + 1, tvwChild, _
                         "k" & s, Trim$(g_uLevel.Title), _
                         IIf(bDone, 4, 3) _
                         )
                         
                    tvi.Mask = TVIF_IMAGE Or TVIF_SELECTEDIMAGE
                    tvi.hItem = pNode.Handle
                    tvi.iImage = IIf(bDone, 3, 2)
                    tvi.iSelectedImage = IIf(bDone, 3, 2)
                    SendMessage tvLevels.hWnd, TVM_SETITEMW, 0, tvi
                End If
            Next lID
        
          Else
        
            For r = 0 To nRatings
                
                '-- Starting level
                lID = g_eGamePack * 1000 + r * 100
                l = 0
                
                '-- Get all levels
                Do While FileExists(sPath & Format$(lID, "0000") & ".dat")
                    
                    '-- Level ID
                    s = Format$(lID, "0000")
                    l = l + 1
                    
                    '-- Done?
                    bDone = IsLevelDone(Val(s))
                    
                    '-- Add to list
                    Call LoadLevelTitle(Val(s))
                    Set pNode = tvLevels.Nodes.Add(r + 1, tvwChild, "k" & s, _
                         l & ". " & Trim$(g_uLevel.Title), _
                         IIf(bDone, 4, 3) _
                         )
                    
                    tvi.Mask = TVIF_IMAGE Or TVIF_SELECTEDIMAGE
                    tvi.hItem = pNode.Handle
                    tvi.iImage = IIf(bDone, 3, 2)
                    tvi.iSelectedImage = IIf(bDone, 3, 2)
                    SendMessage tvLevels.hWnd, TVM_SETITEMW, 0, tvi
                    
                    '-- Last done?
                    If (bDone) Then
                        lID = lID + 1
                      Else
                        Exit Do
                    End If
                Loop
            Next r
        End If
    End Sub
    
    Private Sub pvSelectCurrent()
        
      Dim sKey As String
        
        On Error GoTo errH
        sKey = "k" & Format$(g_nLevelID, "0000")
        With tvLevels
            .Nodes(sKey).Selected = True
            Call .Nodes(sKey).EnsureVisible
            Call tvLevels_NodeClick(.Nodes(sKey))
        End With
    
    errH:
        On Error GoTo 0
    End Sub
    
    Private Sub Form_Unload(Cancel As Integer)
        Call SendMessage(Me.tvLevels.hWnd, TVM_SETIMAGELIST, 0, ByVal 0)
        If himl Then ImageList_Destroy himl
        If gdipInitToken Then FreeGDIPlus gdipInitToken
    End Sub
    
    Private Function hBitmapFromFile(PicFile As String, Width As Long, Height As Long, Optional ByVal BackColor As Long = vbWhite, Optional RetainRatio As Boolean = False) As LongPtr
    Dim hDC     As LongPtr
    Dim hBitmap As LongPtr
    Dim Img     As LongPtr
        
    ' Load the image
    If GdipLoadImageFromFile(StrPtr(PicFile), Img) <> 0 Then
        Debug.Print "hBitmapFromFile::GdipLoadImageFromFile failed."
        Exit Function
    End If
    
    ' Calculate picture's width and height if not specified
    If Width = -1 Or Height = -1 Then
        GdipGetImageWidth Img, Width
        GdipGetImageHeight Img, Height
    End If
    
    ' Initialise the hDC
    InitDC hDC, hBitmap, BackColor, Width, Height
    
    ' Resize the picture
    'gdipResize Img, hDC, Width, Height, RetainRatio
    gdipDrawCentered Img, hDC, Width, Height, True
    GdipDisposeImage Img
    
    ' Get the bitmap back
    GetBitmap hDC, hBitmap
    
    hBitmapFromFile = hBitmap
    End Function
    Private Sub gdipDrawCentered(Img As LongPtr, hDC As LongPtr, Width As Long, Height As Long, Optional bDrawBorder As Boolean = False)
    'draw a smaller image centered on a larger background
    Debug.Print "gdipDrawCentered", 9
        Dim graphics   As LongPtr      ' Graphics Object Pointer
        Dim OrWidth    As Long      ' Original Image Width
        Dim OrHeight   As Long      ' Original Image Height
        GdipGetImageWidth Img, OrWidth
        GdipGetImageHeight Img, OrHeight
        GdipCreateFromHDC hDC, graphics
        GdipSetInterpolationMode graphics, InterpolationModeHighQualityBicubic
    
        Dim DestX      As Long      ' Destination image X
        Dim DestY      As Long      ' Destination image Y
        Dim DestWidth  As Long      ' Destination image Width
        Dim DestHeight As Long      ' Destination image Height
        Dim maxCXY As Long
        Dim dRatio As Double
    ' If m_ThumbScaleCXY Then
    '     maxCXY = m_ThumbCXY '* m_ScaleX
    '     dRatio = OrWidth / OrHeight
        
    '     DestWidth = OrWidth * m_ScaleX
    '     DestHeight = OrHeight * m_ScaleY
    '     If DestWidth > maxCXY Then
    '         DestWidth = maxCXY
    '         DestHeight = DestWidth \ dRatio
    '     ElseIf DestHeight > maxCXY Then
    '         DestHeight = maxCXY
    '         DestWidth = DestHeight * dRatio
    '     End If
    '     DebugAppend "gdipDraw scaled " & OrWidth & "," & OrHeight & " to " & DestWidth & "x" & DestHeight, 22
    '     DestX = (Width - DestWidth) \ 2
    '     DestY = (Height - DestHeight) \ 2
    ' Else
        DestX = (Width - OrWidth) \ 2
        DestY = (Height - OrHeight) \ 2
    'End If
    
    If bDrawBorder Then
        Dim hPen As LongPtr, lRet As Long
        'GdipCreatePen1 &HFFCFCFCF, 2, ByVal 2&, hPen '&HFFD6D6D6
        'Frame was hard to see on dark background; adjust for luminance
        Dim clr As Integer
        Dim cBlend As Long
        Dim col As Long
        OleTranslateColor vbWhite, 0&, col
    '        DebugAppend "col=" & Hex$(col)
        Dim R As Integer
        Dim g As Integer
        Dim b As Integer
        R = &HFF& And col
        g = (&HFF00& And col) \ 256
        b = (&HFF0000 And col) \ 65536
        Dim lum As Long
        lum = CLng(Round((0.2126 * R + 0.7152 * g + 0.0722 * b), 0))
    '        DebugAppend "lum=" & lum
        clr = 200 - (240 - lum)
        If clr > 214 Then clr = 214
        If clr < 75 Then clr = 75
        cBlend = &HFF000000 + RGB(clr, clr, clr)
        GdipCreatePen1 cBlend, 2, ByVal 2&, hPen
        lRet = GdipDrawRectangleI(graphics, hPen, 0, 0, Width - 1, Height - 1)
        GdipDeletePen hPen
    End If
    
    ' If m_ThumbScaleCXY Then
    '     GdipDrawImageRectRectI graphics, Img, DestX, DestY, DestWidth, DestHeight, 0, 0, OrWidth, OrHeight, UnitPixel, 0, 0, 0
    ' Else
        GdipDrawImageRectI graphics, Img, DestX, DestY, OrWidth, OrHeight
    'End If
    
    GdipDeleteGraphics graphics
    
    End Sub
    Private Sub GetBitmap(hDC As LongPtr, hBitmap As LongPtr)
        hBitmap = SelectObject(hDC, hBitmap)
        DeleteDC hDC
    End Sub
    ' Initialises the hDC to draw
    Private Sub InitDC(hDC As LongPtr, hBitmap As LongPtr, BackColor As Long, Width As Long, Height As Long)
        ' Create a memory DC and select a bitmap into it, fill it in with the backcolor
        hDC = CreateCompatibleDC(ByVal 0&)
        hBitmap = Create32BitHBITMAP(hDC, Width, Height)
        hBitmap = SelectObject(hDC, hBitmap)
        
    End Sub
    Private Function Create32BitHBITMAP(hDC As LongPtr, cx As Long, cy As Long) As LongPtr
    Dim bmi As BITMAPINFO
        bmi.bmiHeader.biSize = LenB(bmi.bmiHeader)
        bmi.bmiHeader.biPlanes = 1
        bmi.bmiHeader.biCompression = 0
    
        bmi.bmiHeader.biWidth = cx
        bmi.bmiHeader.biHeight = cy
        bmi.bmiHeader.biBitCount = 32
        Create32BitHBITMAP = CreateDIBSection(hDC, bmi, DIB_RGB_COLORS, ByVal 0&, 0, 0)
        
    End Function
    Private Function InitGDIPlus() As LongPtr
        Dim Token    As LongPtr
        Dim gdipInit As GdiplusStartupInput
        
        gdipInit.GdiplusVersion = 1
        GdiplusStartup Token, gdipInit, ByVal 0&
        InitGDIPlus = Token
    End Function
    
    ' Frees GDI Plus
    Private Sub FreeGDIPlus(Token As LongPtr)
        GdiplusShutdown Token
    End Sub
End Class


















' [ FormDesignerId ("459CCBF2-2927-4B0E-9725-58870AC1CBCD") ]
' [ ClassId ("A7B6512E-3879-4E06-877A-57DE084B7C0E") ]
' [ InterfaceId ("93E803AE-7070-4FD8-BFA5-EAC192FF6CF3") ]
' [ EventInterfaceId ("B5F4F4A9-FE24-45D3-996D-03E208194D7B") ]
' Class fLevel
'     Attribute VB_Name = "fLevel"
'     Attribute VB_GlobalNameSpace = False
'     Attribute VB_Creatable = False
'     Attribute VB_PredeclaredId = True
'     Attribute VB_Exposed = False
'     Option Explicit
    
'     Private Const TV_FIRST         As Long = &H1100
'     Private Const TVM_SETBKCOLOR   As Long = TV_FIRST + 29
'     Private Const TVM_SETTEXTCOLOR As Long = TV_FIRST + 30
'     Private Const TVM_SETIMAGELIST As Long = TV_FIRST + 9

'     Private Declare PtrSafe Function SendMessage Lib "user32" Alias "SendMessageA" (ByVal hWnd As LongPtr, ByVal wMsg As Long, ByVal wParam As LongPtr, lParam As Any) As LongPtr

    
    
'     '========================================================================================
'     ' Main
'     '========================================================================================
    
'     Private Sub Form_Load()
    
'         '-- No icon
'         Set Me.Icon = Nothing
        
'         '-- Form cursor
'         Set Me.MouseIcon = VB.LoadResPicture("CUR_HAND", vbResCursor)
        
'         '-- Image-list images
'         Call Me.ilLevels.ListImages.Add(, , VB.LoadPicture(AppPath & "RES\Folder_blue.gif"))
'         Call Me.ilLevels.ListImages.Add(, , VB.LoadPicture(AppPath & "RES\Folder_blue.gif"))
'         Call Me.ilLevels.ListImages.Add(, , VB.LoadPicture(AppPath & "RES\Checkbox_unchecked.gif"))
'         Call Me.ilLevels.ListImages.Add(, , VB.LoadPicture(AppPath & "RES\Checkbox_checked.gif"))
        
'         '-- Change treeview colors (masking problems with imagelist)
'         Call SendMessage(Me.tvLevels.hWnd, TVM_SETBKCOLOR, 0, ByVal vbWhite)
'         Call SendMessage(Me.tvLevels.hWnd, TVM_SETTEXTCOLOR, 0, ByVal vbBlack)
'         Call SendMessage(Me.tvLevels.hWnd, TVM_SETIMAGELIST, 0, ByVal ilLevels.hImageList)
        
'         '-- Level preview drawing offsets
'         ucThumbnail.xOffset = 1
'         ucThumbnail.yOffset = 1
        
'         '-- Skill images
'         Set imgSkill(0) = VB.LoadPicture(AppPath & "RES\Climber.ico")
'         Set imgSkill(1) = VB.LoadPicture(AppPath & "RES\Floater.ico")
'         Set imgSkill(2) = VB.LoadPicture(AppPath & "RES\Bomber.ico")
'         Set imgSkill(3) = VB.LoadPicture(AppPath & "RES\Blocker.ico")
'         Set imgSkill(4) = VB.LoadPicture(AppPath & "RES\Builder.ico")
'         Set imgSkill(5) = VB.LoadPicture(AppPath & "RES\Basher.ico")
'         Set imgSkill(6) = VB.LoadPicture(AppPath & "RES\Miner.ico")
'         Set imgSkill(7) = VB.LoadPicture(AppPath & "RES\Digger.ico")
        
'         '-- Fill treeview with all levels
'         Screen.MousePointer = vbHourglass
'         Call pvShowAllLevels
'         Screen.MousePointer = vbDefault
        
'         '-- Select current level ID
'         Call pvSelectCurrent
'     End Sub
    
'     ' Private Sub ZoomPicture(pct As PictureBox, zoom As Double)
'     '     With pct
'     '         .AutoRedraw = True
'     '         .Width = .Width * zoom
'     '         .Height = .Height * zoom
'     '         .PaintPicture .Picture, 0, 0, .ScaleWidth, .ScaleHeight
'     '         .Refresh
'     '     End With
'     ' End Sub
    
'     Private Sub tvLevels_NodeClick(ByVal Node As WinNativeCommonCtls.Node)
        
'         If (Node.Children) Then
        
'             '-- Single click expands roots
'             If (Node.Expanded = False) Then
'                 Node.Expanded = True
'             End If
            
'             '-- Root node: no level selected
'             Call ucThumbnail.DIB.Destroy
'             Call ucThumbnail.Refresh
'             lblLemsToLetOutVal = ""
'             lblLemsToBeSavedVal = ""
'             lblPlayingTimeVal = ""
'             lblSkill(0) = ""
'             lblSkill(1) = ""
'             lblSkill(2) = ""
'             lblSkill(3) = ""
'             lblSkill(4) = ""
'             lblSkill(5) = ""
'             lblSkill(6) = ""
'             lblSkill(7) = ""
            
'           Else
'             '-- Extract level key
'             g_nLevelID = Val(Mid$(tvLevels.SelectedItem.Key, 2))
'             Debug.Print tvLevels.SelectedItem.Index & "->" & Mid$(tvLevels.SelectedItem.Key, 2) & " ==" & g_nLevelID
'             '-- Load/create level thumbnail
'             Call GetLevelThumbnail(ucThumbnail.DIB)
'             Call ucThumbnail.Refresh
            
'             '-- Get level info
'             Call LoadLevelInfo(g_nLevelID)
'             With g_uLevel
'                 lblLemsToLetOutVal = .LemsToLetOut
'                 lblLemsToBeSavedVal = .LemsToBeSaved
'                 lblPlayingTimeVal = .PlayingTime & "'"
'                 lblSkill(0) = IIf(.MaxClimbers, .MaxClimbers, "-")
'                 lblSkill(1) = IIf(.MaxFloaters, .MaxFloaters, "-")
'                 lblSkill(2) = IIf(.MaxBombers, .MaxBombers, "-")
'                 lblSkill(3) = IIf(.MaxBlockers, .MaxBlockers, "-")
'                 lblSkill(4) = IIf(.MaxBuilders, .MaxBuilders, "-")
'                 lblSkill(5) = IIf(.MaxBashers, .MaxBashers, "-")
'                 lblSkill(6) = IIf(.MaxMiners, .MaxMiners, "-")
'                 lblSkill(7) = IIf(.MaxDiggers, .MaxDiggers, "-")
'             End With
'         End If
'     End Sub
    
'     Private Sub cmdOK_Click()
    
'         '-- Is a valid node?
'         If (tvLevels.SelectedItem.Children = 0) Then
'             '-- Yes
'             Call VB.Unload(Me)
'           Else
'             '-- No
'             Call VBA.MsgBox( _
'                  "No level has been selected." & vbCrLf & vbCrLf & "Please, select a valid level.", _
'                  vbExclamation _
'                  )
'         End If
'     End Sub
    
'     Private Sub cmdCancel_Click()
        
'         '-- Just exit
'         Call VB.Unload(Me)
'     End Sub
    
'     '========================================================================================
'     ' Private
'     '========================================================================================
    
'     Private Sub pvShowAllLevels()
        
'       Dim nRatings   As Integer
'       Dim sPath      As String
'       Dim r          As Integer
'       Dim l          As Integer
'       Dim lID        As Integer
'       Dim s          As String
'       Dim bDone      As Boolean
      
'         '-- Available ratings
'         Select Case g_eGamePack
'             Case [ePackLems]
'                 Call tvLevels.Nodes.Add(, , "Fun", "Fun", 1)
'                 Call tvLevels.Nodes.Add(, , "Tricky", "Tricky", 1)
'                 Call tvLevels.Nodes.Add(, , "Taxing", "Taxing", 1)
'                 Call tvLevels.Nodes.Add(, , "Mayhem", "Mayhem", 1)
'                 nRatings = 4
'             Case [ePackOhNoMoreLems]
'                 Call tvLevels.Nodes.Add(, , "Tame", "Tame", 1)
'                 Call tvLevels.Nodes.Add(, , "Crazy", "Crazy", 1)
'                 Call tvLevels.Nodes.Add(, , "Wild", "Wild", 1)
'                 Call tvLevels.Nodes.Add(, , "Wicked", "Wicked", 1)
'                 Call tvLevels.Nodes.Add(, , "Havoc", "Havoc", 1)
'                 nRatings = 5
'             Case [ePackCustom]
'                 Call tvLevels.Nodes.Add(, , "Custom", "Custom", 2)
'         End Select
        
'         '-- Load levels...
        
'         sPath = AppPath & "LEVELS\"
        
'         If (g_eGamePack = [ePackCustom]) Then
            
'             '-- Search levels...
'             For lID = g_eGamePack * 1000 To g_eGamePack * 1000 + 999
                
'                 '-- Level ID
'                 s = Format$(lID, "0000")
                
'                 '-- Exists?
'                 If (FileExists(sPath & s & ".dat")) Then
                
'                     '-- Done?
'                     bDone = IsLevelDone(Val(s))
                    
'                     '-- Add to list
'                     Call LoadLevelTitle(Val(s))
'                     Call tvLevels.Nodes.Add(r + 1, tvwChild, _
'                          "k" & s, Trim$(g_uLevel.Title), _
'                          IIf(bDone, 4, 3) _
'                          )
'                 End If
'             Next lID
        
'           Else
        
'             For r = 0 To nRatings
                
'                 '-- Starting level
'                 lID = g_eGamePack * 1000 + r * 100
'                 l = 0
                
'                 '-- Get all levels
'                 Do While FileExists(sPath & Format$(lID, "0000") & ".dat")
                    
'                     '-- Level ID
'                     s = Format$(lID, "0000")
'                     l = l + 1
                    
'                     '-- Done?
'                     bDone = IsLevelDone(Val(s))
                    
'                     '-- Add to list
'                     Call LoadLevelTitle(Val(s))
'                     Call tvLevels.Nodes.Add(r + 1, tvwChild, "k" & s, _
'                          l & ". " & Trim$(g_uLevel.Title), _
'                          IIf(bDone, 4, 3) _
'                          )
                    
'                     '-- Last done?
'                     If (bDone) Then
'                         lID = lID + 1
'                       Else
'                         Exit Do
'                     End If
'                 Loop
'             Next r
'         End If
'     End Sub
    
'     Private Sub pvSelectCurrent()
        
'       Dim sKey As String
        
'         On Error GoTo errH
'         sKey = "k" & Format$(g_nLevelID, "0000")
'         With tvLevels
'             .Nodes(sKey).Selected = True
'             Call .Nodes(sKey).EnsureVisible
'             Call tvLevels_NodeClick(.Nodes(sKey))
'         End With
    
'     errH:
'         On Error GoTo 0
'     End Sub

    

' End Class









' [ FormDesignerId ("459CCBF2-2927-4B0E-9725-58870AC1CBCD") ]
' [ ClassId ("A7B6512E-3879-4E06-877A-57DE084B7C0E") ]
' [ InterfaceId ("93E803AE-7070-4FD8-BFA5-EAC192FF6CF3") ]
' [ EventInterfaceId ("B5F4F4A9-FE24-45D3-996D-03E208194D7B") ]
' Class fLevel
'     Attribute VB_Name = "fLevel"
'     Attribute VB_GlobalNameSpace = False
'     Attribute VB_Creatable = False
'     Attribute VB_PredeclaredId = True
'     Attribute VB_Exposed = False
'     Option Explicit
    
'     Private Const TV_FIRST         As Long = &H1100
'     Private Const TVM_SETBKCOLOR   As Long = TV_FIRST + 29
'     Private Const TVM_SETTEXTCOLOR As Long = TV_FIRST + 30
'     Private Const TVM_SETIMAGELIST As Long = TV_FIRST + 9

'     Private Declare PtrSafe Function SendMessage Lib "user32" Alias "SendMessageA" (ByVal hWnd As LongPtr, ByVal wMsg As Long, ByVal wParam As LongPtr, lParam As Any) As LongPtr

    
    
'     '========================================================================================
'     ' Main
'     '========================================================================================
    
'     Private Sub Form_Load()
    
'         '-- No icon
'         Set Me.Icon = Nothing
        
'         '-- Form cursor
'         Set Me.MouseIcon = VB.LoadResPicture("CUR_HAND", vbResCursor)
        
'         '-- Image-list images
'         Call Me.ilLevels.ListImages.Add(, , VB.LoadPicture(AppPath & "RES\Folder_blue.gif"))
'         Call Me.ilLevels.ListImages.Add(, , VB.LoadPicture(AppPath & "RES\Folder_blue.gif"))
'         Call Me.ilLevels.ListImages.Add(, , VB.LoadPicture(AppPath & "RES\Checkbox_unchecked.gif"))
'         Call Me.ilLevels.ListImages.Add(, , VB.LoadPicture(AppPath & "RES\Checkbox_checked.gif"))
        
'         '-- Change treeview colors (masking problems with imagelist)
'         Call SendMessage(Me.tvLevels.hWnd, TVM_SETBKCOLOR, 0, ByVal vbWhite)
'         Call SendMessage(Me.tvLevels.hWnd, TVM_SETTEXTCOLOR, 0, ByVal vbBlack)
'         Call SendMessage(Me.tvLevels.hWnd, TVM_SETIMAGELIST, 0, ByVal ilLevels.hImageList)
        
'         '-- Level preview drawing offsets
'         ucThumbnail.xOffset = 1
'         ucThumbnail.yOffset = 1
        
'         '-- Skill images
'         Set imgSkill(0) = VB.LoadPicture(AppPath & "RES\Climber.ico")
'         Set imgSkill(1) = VB.LoadPicture(AppPath & "RES\Floater.ico")
'         Set imgSkill(2) = VB.LoadPicture(AppPath & "RES\Bomber.ico")
'         Set imgSkill(3) = VB.LoadPicture(AppPath & "RES\Blocker.ico")
'         Set imgSkill(4) = VB.LoadPicture(AppPath & "RES\Builder.ico")
'         Set imgSkill(5) = VB.LoadPicture(AppPath & "RES\Basher.ico")
'         Set imgSkill(6) = VB.LoadPicture(AppPath & "RES\Miner.ico")
'         Set imgSkill(7) = VB.LoadPicture(AppPath & "RES\Digger.ico")
        
'         '-- Fill treeview with all levels
'         Screen.MousePointer = vbHourglass
'         Call pvShowAllLevels
'         Screen.MousePointer = vbDefault
        
'         '-- Select current level ID
'         Call pvSelectCurrent
'     End Sub
    
'     ' Private Sub ZoomPicture(pct As PictureBox, zoom As Double)
'     '     With pct
'     '         .AutoRedraw = True
'     '         .Width = .Width * zoom
'     '         .Height = .Height * zoom
'     '         .PaintPicture .Picture, 0, 0, .ScaleWidth, .ScaleHeight
'     '         .Refresh
'     '     End With
'     ' End Sub
    
'     Private Sub tvLevels_NodeClick(ByVal Node As WinNativeCommonCtls.Node)
        
'         If (Node.Children) Then
        
'             '-- Single click expands roots
'             If (Node.Expanded = False) Then
'                 Node.Expanded = True
'             End If
            
'             '-- Root node: no level selected
'             Call ucThumbnail.DIB.Destroy
'             Call ucThumbnail.Refresh
'             lblLemsToLetOutVal = ""
'             lblLemsToBeSavedVal = ""
'             lblPlayingTimeVal = ""
'             lblSkill(0) = ""
'             lblSkill(1) = ""
'             lblSkill(2) = ""
'             lblSkill(3) = ""
'             lblSkill(4) = ""
'             lblSkill(5) = ""
'             lblSkill(6) = ""
'             lblSkill(7) = ""
            
'           Else
'             '-- Extract level key
'             g_nLevelID = Val(Mid$(tvLevels.SelectedItem.Key, 2))
'             Debug.Print tvLevels.SelectedItem.Index & "->" & Mid$(tvLevels.SelectedItem.Key, 2) & " ==" & g_nLevelID
'             '-- Load/create level thumbnail
'             Call GetLevelThumbnail(ucThumbnail.DIB)
'             Call ucThumbnail.Refresh
            
'             '-- Get level info
'             Call LoadLevelInfo(g_nLevelID)
'             With g_uLevel
'                 lblLemsToLetOutVal = .LemsToLetOut
'                 lblLemsToBeSavedVal = .LemsToBeSaved
'                 lblPlayingTimeVal = .PlayingTime & "'"
'                 lblSkill(0) = IIf(.MaxClimbers, .MaxClimbers, "-")
'                 lblSkill(1) = IIf(.MaxFloaters, .MaxFloaters, "-")
'                 lblSkill(2) = IIf(.MaxBombers, .MaxBombers, "-")
'                 lblSkill(3) = IIf(.MaxBlockers, .MaxBlockers, "-")
'                 lblSkill(4) = IIf(.MaxBuilders, .MaxBuilders, "-")
'                 lblSkill(5) = IIf(.MaxBashers, .MaxBashers, "-")
'                 lblSkill(6) = IIf(.MaxMiners, .MaxMiners, "-")
'                 lblSkill(7) = IIf(.MaxDiggers, .MaxDiggers, "-")
'             End With
'         End If
'     End Sub
    
'     Private Sub cmdOK_Click()
    
'         '-- Is a valid node?
'         If (tvLevels.SelectedItem.Children = 0) Then
'             '-- Yes
'             Call VB.Unload(Me)
'           Else
'             '-- No
'             Call VBA.MsgBox( _
'                  "No level has been selected." & vbCrLf & vbCrLf & "Please, select a valid level.", _
'                  vbExclamation _
'                  )
'         End If
'     End Sub
    
'     Private Sub cmdCancel_Click()
        
'         '-- Just exit
'         Call VB.Unload(Me)
'     End Sub
    
'     '========================================================================================
'     ' Private
'     '========================================================================================
    
'     Private Sub pvShowAllLevels()
        
'       Dim nRatings   As Integer
'       Dim sPath      As String
'       Dim r          As Integer
'       Dim l          As Integer
'       Dim lID        As Integer
'       Dim s          As String
'       Dim bDone      As Boolean
      
'         '-- Available ratings
'         Select Case g_eGamePack
'             Case [ePackLems]
'                 Call tvLevels.Nodes.Add(, , "Fun", "Fun", 1)
'                 Call tvLevels.Nodes.Add(, , "Tricky", "Tricky", 1)
'                 Call tvLevels.Nodes.Add(, , "Taxing", "Taxing", 1)
'                 Call tvLevels.Nodes.Add(, , "Mayhem", "Mayhem", 1)
'                 nRatings = 4
'             Case [ePackOhNoMoreLems]
'                 Call tvLevels.Nodes.Add(, , "Tame", "Tame", 1)
'                 Call tvLevels.Nodes.Add(, , "Crazy", "Crazy", 1)
'                 Call tvLevels.Nodes.Add(, , "Wild", "Wild", 1)
'                 Call tvLevels.Nodes.Add(, , "Wicked", "Wicked", 1)
'                 Call tvLevels.Nodes.Add(, , "Havoc", "Havoc", 1)
'                 nRatings = 5
'             Case [ePackCustom]
'                 Call tvLevels.Nodes.Add(, , "Custom", "Custom", 2)
'         End Select
        
'         '-- Load levels...
        
'         sPath = AppPath & "LEVELS\"
        
'         If (g_eGamePack = [ePackCustom]) Then
            
'             '-- Search levels...
'             For lID = g_eGamePack * 1000 To g_eGamePack * 1000 + 999
                
'                 '-- Level ID
'                 s = Format$(lID, "0000")
                
'                 '-- Exists?
'                 If (FileExists(sPath & s & ".dat")) Then
                
'                     '-- Done?
'                     bDone = IsLevelDone(Val(s))
                    
'                     '-- Add to list
'                     Call LoadLevelTitle(Val(s))
'                     Call tvLevels.Nodes.Add(r + 1, tvwChild, _
'                          "k" & s, Trim$(g_uLevel.Title), _
'                          IIf(bDone, 4, 3) _
'                          )
'                 End If
'             Next lID
        
'           Else
        
'             For r = 0 To nRatings
                
'                 '-- Starting level
'                 lID = g_eGamePack * 1000 + r * 100
'                 l = 0
                
'                 '-- Get all levels
'                 Do While FileExists(sPath & Format$(lID, "0000") & ".dat")
                    
'                     '-- Level ID
'                     s = Format$(lID, "0000")
'                     l = l + 1
                    
'                     '-- Done?
'                     bDone = IsLevelDone(Val(s))
                    
'                     '-- Add to list
'                     Call LoadLevelTitle(Val(s))
'                     Call tvLevels.Nodes.Add(r + 1, tvwChild, "k" & s, _
'                          l & ". " & Trim$(g_uLevel.Title), _
'                          IIf(bDone, 4, 3) _
'                          )
                    
'                     '-- Last done?
'                     If (bDone) Then
'                         lID = lID + 1
'                       Else
'                         Exit Do
'                     End If
'                 Loop
'             Next r
'         End If
'     End Sub
    
'     Private Sub pvSelectCurrent()
        
'       Dim sKey As String
        
'         On Error GoTo errH
'         sKey = "k" & Format$(g_nLevelID, "0000")
'         With tvLevels
'             .Nodes(sKey).Selected = True
'             Call .Nodes(sKey).EnsureVisible
'             Call tvLevels_NodeClick(.Nodes(sKey))
'         End With
    
'     errH:
'         On Error GoTo 0
'     End Sub

    

' End Class
